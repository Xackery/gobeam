syntax = "proto3";

package gobeam;

// Top-Level Wire Messages ====================================================
//
// The following messages are the top-level message sent over the wire. See
// developers.beam.pro for more information on the wire protocol.
//
// ============================================================================


// Handshake MUST be the first message sent from clients to servers.
// After sending it, they should wait for a HandshakeACK, which will
// contain authentication status.
message Handshake {
    // Channel ID you want to connect as.
     uint32 channel = 1;
    // That channel's stream key
     string streamKey = 2;
}

// This is sent from the server to the client in response to a
// Handshake message. It's only send on a successful handshake.
// In other cases, an error will be sent.
message HandshakeACK {}

// The Report is send down to the streamer's computer at the
// reportFrequency, containing information about connected
// clients and their actions.
message Report {
    // Time since start of connection in seconds
     uint32 time = 1;
     Users users = 2;

    // Contains information about the users connected to the stream.
    message Users {
        // Total number of users connected to the stream.
         uint32 connected = 1;
        // Number of users who gave any kind of input in the last 30 seconds.
         uint32 quorum = 2;
        // Number of users who gave input in *this* report interval.
         uint32 active = 3;

        // User activity is reported in a histographic fashion via a
        // 1D histogram, which record the number of users who gave
        // any sort of input in the last (now - x) milliseconds.
        repeated HistogramUint1D qgram = 4;
    }

    // Reports for the Joystick input type.
    message JoystickInfo {
        // The id of this Joystick defined in the control editor/ Interactive Game Schema
         uint32 id = 1;

        // Cordinates analysis, if requested. The coordinates are in the range
        // [-1, 1], where (0, 0) is the "middle" of the joystick, (-1, -1)
        // is the upper-left corner of the joystick, and (1, 1) is the lower
        // right corner of the joystick.

        // Average of all the user's positions
         Coordinate coordMean = 2;

        // Standard deviation of the above coordMean
         Coordinate coordStddev = 3;
    }
    repeated JoystickInfo joystick = 3;

    // Reports for the Tactile input type.
    message TactileInfo {
        // The id of this Tactile defined in the control editor/ Interactive Game Schema
         uint32 id = 1;

        // analysis on how many users are holding and pressing releasing
        // the buttons, if requested.

        // Number of users holding this tactile in the report interval
         double holding = 2;

        // Number of users pressing the tactile in this report interval
         double pressFrequency = 3;

        // Number of users releasing the tactile in this report interval
         double releaseFrequency = 4;
    }
    repeated TactileInfo tactile = 4;

    // Reports for the Screen input type.
    message ScreenInfo {
        // The id of this Screen defined in the control editor/ Interactive Game Schema
         uint32 id = 1;

        // The number of clicks users made this analysis cycle.
         double clicks = 2;
        // Coordinate analysis if requested, in the range [0, 1]. The
        // upper-left corner of the screen is (0, 0), and the lower right
        // corner is (1, 1).

        // Average of all the user's positions
         Coordinate coordMean = 3;

        // Standard deviation of the above coordMean
         Coordinate coordStddev = 4;
    }
    repeated ScreenInfo screen = 5;
}

// An error in response to some invalid input or event.
message Error {
    // An error message
     string message = 1;
}

// A ProgressUpdate message may be sent up periodically from
// the Robot. It contains an array of objects to update the
// multiple controls on the frontend.
message ProgressUpdate {
    // State to change to. States with the given state in their `states` array
    // will be visible. If not passed, the state will not be changed.
    // The default state at initialization of the robot is simply "default".
     string state = 3;

    message JoystickUpdate {
        // The ID of the joystick control to update
         uint32 id = 1;

        // The angle to move the "pointer" that appears around the joystick
        // to. This is usually used to indicate the average direction that
        // users pointing to. This is given in radians, in the range
        // [0, 2Ï€), with the same alignment as the standard unit circle.
         double angle = 2;

        // Intensity the pointer should appear at. This is often used to
        // indicate how strongly users are moving in a direction.
        // Should be given in the range [0, 1].
         double intensity = 3;

        // Changes the disabled or enabled state of the control. If you pass
        // `disabled = true` in a progress update, users won't be able to
        // give input on that control until you send `disabled = false`.
         bool disabled = 4;
    }
    repeated JoystickUpdate joystick = 1;

    message TactileUpdate {
        // The ID of the tactile control to update
         uint32 id = 1;

        // Starts a cooldown for all users, with a duration given in milliseconds.
        // Users will not be able to press the button until the cooldown is
        // over. Users who currently are pressing the button will be marked
        // as having released it. Sending another cooldown before the first
        // is over sets the cooldown's duration. The cooldown duration will
        // decrement automatically.
         uint32 cooldown = 2;

        // Marks the button has having been fired, showing a "pulse"
        // on the Beam frontend.
         bool fired = 3;

        // Sets the progress of the button toward some threshold, appearing
        // as a sort of progress bar on the frontend. Should be given in the
        // range [0, 1].
         double progress = 4;

        // Changes the disabled or enabled state of the control. If you pass
        // `disabled = true` in a progress update, users won't be able to
        // give input on that control until you send `disabled = false`.
         bool disabled = 5;
    }
    repeated TactileUpdate tactile = 2;

    message ScreenUpdate {
        // The ID of the screen control to update
         uint32 id = 1;

        message Click {
            // x and y follow the same coordinate system as described in
            // Report.ScreenInfo .
             Coordinate coordinate = 1;

            // Intensity of the pulse from 0 to 1.
             double intensity = 2;
        }

        // A list of clicks that will be displayed on the frontend as pulses
        // on the screen. You can show multiple pulses per cycle.
        repeated Click clicks = 2;

        // Changes the disabled or enabled state of the control. If you pass
        // `disabled = true` in a progress update, users won't be able to
        // give input on that control until you send `disabled = false`.
         bool disabled = 3;
    }
    repeated ScreenUpdate screen = 4;
}

// Utility Messages ===========================================================
//
// These messages are utilities used for data representation in the above
// messages.
//
// ============================================================================

// HistogramUint1D is a point on a 1-dimensional histogram, where `x` is the
// defined horizontal axis and y is the vertical axis.
message HistogramUint1D {
     uint32 x = 1;
     uint32 y = 2;
}

// Coordinate represents a single x/y point on a screen or joystick.
message Coordinate {
     double x = 1;
     double y = 2;
}